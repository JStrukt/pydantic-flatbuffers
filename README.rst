========
Flattools
========

Python tools to deal with flatbuffers:

* flatc.py

  Flatbuffer compiler in python

* thrift2fbs.py.

  Convert thrift to flatbuffers where possible

* pp.py

  gdb pretty printer for flatbuffers

Code Demo: thrift2fbs.py
=======================

::

    struct Person {
        1: string name,
        2: string address,
        3: i16 age
    }

    struct Email {
        1: string subject = 'Subject',
        2: string content,
        3: Person sender,
        4: required Person recver,
    }

    enum Operation {
      ADD = 1,
      SUBTRACT = 2,
      MULTIPLY = 3,
      DIVIDE = 4
    }


Generates

::

    table Person {
       name : string;
       address : string;
       age : short;
    }

    table Email {
       subject : string;
       content : string;
       sender : Person;
       recver : Person;
    }

    enum Operation : int {
      MULTIPLY = 3,
      ADD = 1,
      SUBTRACT = 2,
      DIVIDE = 4,
    }

Code Demo: flatc.py
===================

There are several templates in templates/fbs_template*

Running

.. code:: bash

    $ flatc.py tests/parser-cases/color.fbs --kotlin=1

Generates something like

::

    // automatically generated by the FlatBuffers compiler, do not modify
    enum class Color(val x: Byte) {
        Red(1),
        Green(2),
        Blue(3),
    }

    data class Person(
        val name: String,
        val address: String,
        val age: Short,
        val length: ULong,
        val favorite_color: Color,
    )

    data class Product(
        val label: String,
        val price: Int,
    )

    sealed class Item {
        class Product : Item()
        class Person : Item()
    }

This uses templated code generation using jinja2.

Supported languages: python, rust, kotlin, swift

Installation
============

RPM based systems

.. code:: bash

   $ sudo yum install python-ply python-jinja2

Ubuntu/Debian

.. code:: bash

   $ sudo apt install python-ply python-jinja2
